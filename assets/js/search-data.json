{
  
    
        "post0": {
            "title": "Problem 27 - Quadratic primes",
            "content": "Initial idea . O(n³) complexity. . Simplifying the formula $ n^2 + an + b $ into $ n (n + a) + b $, we can derive the following properties for the variables in the formula. . Since $ n^2 + an + b $ must be prime, both $ n $ and $ b $, $ n + a $ and $ b $ must be prime. | Since $ n^2 + an + b $ must be prime when $ n = 0 $, $ b $ must be prime. | Since $ n $ is consecutive from 0, pair $ (0, b) $, $ (a, b) $, $ (1, b) $, $ (a + 1, b) $, ... must be prime accordingly. | Since $ b $ must be prime and $ |b| ≤ 1000 $, possible values of $ b $ is prime numbers not exceeding 1000. | Properties applied in code . From property 1 and 3, the conditional statement if n % b is 0 or (n + a) % b is 0 was derived and added in order to optimize iteration. . From property 2, the iteration starts with n = 1 because b is always prime since it&#39;s from the precalculated list of primes. . From property 4, all primes not exceeding 1000 were calculated into b_list. Additionally, using for i in range(3, 1000 + 1, 2): ..., we excluded all even numbers from the iteration. . Pseudocode . calculate all possible values of b for all b: for n from 0: for a from -999 to 999: if n and n + a are prime to b: check whether n + 1 and n + 1 + a are prime, n + 2 and n + 2 + a are prime ... repeat until n + k or n + k + a are not prime . def is_prime(n): for f in range(2, int(n ** 0.5)): if n % f is 0: return False return True b_list = [2] for i in range(3, 1000 + 1, 2): if is_prime(i): b_list.append(i) max = 0 coef_a = 0 coef_b = 0 for b in b_list: for a in range(-999, 1000): count = 1 n = 1 while n * (n + a) + b &gt; 1: if n % b is 0 or (n + a) % b is 0: break # not prime with b if is_prime(n * (n + a) + b): count += 1 n += 1 else: break if count &gt; max: max = count coef_a = a coef_b = b print(coef_a * coef_b) . -59231 . NOTE: Add . if n &lt; 2: return False . in is_prime() function in order to make it complete. .",
            "url": "https://ntcho.github.io/project_euler/solution/2021/06/12/p27.html",
            "relUrl": "/solution/2021/06/12/p27.html",
            "date": " • Jun 12, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Problem 26 - Reciprocal cycles",
            "content": "Initial idea . O(n³) complexity. . Brute force through every possible patterns (repeating decimals) with string comparison and check whether the pattern is found multiple times in the decimals. . from decimal import Decimal as d, getcontext getcontext().prec = 5000 def get_pattern(s): l = len(s) for start_pos in range(l): for pattern_length in range(1, l // 2 + 1): # maximum pattern length is l // 2 because of the precision limitation # can&#39;t determine whether it is repeating or not if it&#39;s longer than l // 2 pattern = s[start_pos:start_pos + pattern_length] # print(f&#39; nstart_pos = {start_pos}, pattern = &#39;{pattern} &#39;&#39;) # compare the pattern to the rest of the string found = None for find_pos in range(start_pos + pattern_length, l, pattern_length): compare = s[find_pos:find_pos + pattern_length] # print(f&#39; comparing &#39;{pattern} &#39; and &#39;{compare} &#39;&#39;) if pattern != compare: if found is not None and len(pattern) &gt; len(compare): # pattern does match but goes over the precision limit found = pattern else: # pattern does not match found = None break else: found = pattern if found is not None: found = pattern return found # pattern match found # no pattern is found in the fraction return &#39;&#39; max = [(&#39;&#39;, 0)] # pattern, n (of 1/n) for i in range(1, 1000): # d(1) / d(6) = 0.1666666666666666666666666667 # └ string stored in f ┘ # f = &#39;166666666666666666666666666&#39; # trim first 2 characters and last 1 character if exists f = str(d(1) / d(i))[2:-1] if len(f) &lt; 20: continue # not reciprocal result = get_pattern(f) if len(result) &gt; len(max[0][0]): max = [(result, i, f)] elif len(result) == len(max[0][0]): max.append((result, i, f)) print(max[0][1]) . 983 . NOTE: Python&#39;s count() function could&#39;ve been used in this case. No need to write a custom string comparator. . Remainder method (from Mike Zubko in solution thread) . O(n²) complexity. Key idea explained in Repeating decimal from Wikipedia. . It follows that any repeating decimal with period n, and k digits after the decimal point that do not belong to the repeating part, can be written as a (not necessarily reduced) fraction whose denominator is (10^n − 1)10^k. . Conversely the period of the repeating decimal of a fraction c/d will be (at most) the smallest number n such that 10ⁿ − 1 is divisible by d. . For example, the fraction 2/7 has d = 7, and the smallest k that makes 10^k − 1 divisible by 7 is k = 6, because 999999 = 7 × 142857. The period of the fraction 2/7 is therefore 6. . Using the fact the problem only requires the period of the repeating decimal (length of the pattern), we can derive the period without calculating the actual decimals. . NOTE:Look for shortcuts to the answer. By finding the smallest p for the given i with the following code, we can efficiently calculate the period of the repeating decimal. . while p &lt; i and (10 ** p) % i != 1: p += 1 . n = 0 # the n with the longest period max_period = 0 for i in range(1, 1000, 2): # step of 2 to skip every even number if i % 5 != 0: # skip every multiple of 5 p = 1 # period for current i while p &lt; i and (10 ** p) % i != 1: p += 1 if p &gt; max_period: max_period = p n = i print(ans) . 983 .",
            "url": "https://ntcho.github.io/project_euler/solution/2021/06/12/p26.html",
            "relUrl": "/solution/2021/06/12/p26.html",
            "date": " • Jun 12, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Problem 2 - Even Fibonacci numbers",
            "content": "Initial idea . O(n) complexity, using recursion. . NOTE: Use loops over recursions for performance. . k = 4000000 sum = 0 def fibo(a, b): if a % 2 is 0: global sum # NOTE: Keyword `global` is required to change the global # variable in a function in Python. sum += a if b &lt; k: fibo(b, a + b) fibo(1, 2) print(str(sum)) . 4613732 . Loop method (from overview) . O(n) complexity. . a = 1 b = 2 sum = 0 while b &lt; k: if b % 2 is 0: sum += b c = a + b a = b b = c print(str(sum)) . 4613732 . Every third number method (from overview) . O(n) complexity, with 1/3 of the iteration compared to the loop method. . Key idea: testing first few iterations . fibonacci sequence = 1 1 2 3 5 8 13 21 34 55 89 144 ... . sum = 0 a = 1 b = 1 c = a + b while c &lt; k: sum += c # Third iteration is always even number a = b + c b = c + a c = a + b print(str(sum)) . 4613732 .",
            "url": "https://ntcho.github.io/project_euler/solution/2021/06/10/p2.html",
            "relUrl": "/solution/2021/06/10/p2.html",
            "date": " • Jun 10, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Problem 1 - Multiples of 3 and 5",
            "content": "Initial idea . O(1) complexity. . Using the mathematical concept of sum of multiples exists as a pair in a range. . For example, for the sum of multiples of 2 not exceeding 8, there would be 5 pairs with equal sum: (2, 8), (4, 6). These pairs sum to 2 + 8, which is the minimum and the maximum multiple. Numbers with odd number of multiples, we can just add (min + max) // 2 to the sum. . k = 999 f = [3, 5, 15] # factors n = [k//3, k//5, k//15] # number of multiples max = [k - k%3, k - k%5, k - k%15] # biggest multiples for each factor sum = [] # sum of each factors for i in range(3): minmax = f[i] + max[i] s = (n[i] // 2) * minmax if n[i] % 2 is 1: s += minmax // 2 sum.append(s) print(str(sum[0] + sum[1] - sum[2])) . 233168 . WARNING: Since it&#39;s defined in the problem as &#39;below 1000&#39;, it shouldn&#39;t contain 1000. . TIP:Consider the range with operands such as &lt;, &gt;, etc. NOTE: Clarify the range of the problem before diving into it. . Bruteforce method . O(n) complexity. . s = 0 for i in range(1000): if i % 3 is 0 or i % 5 is 0: s += i print(s) . 233168 . Function method (from overview) . O(1) complexity. . TIP:Use functons or external blocks for complicated for loops or loops with small iteration count. . k = 999 def get_multiple_sum(f): n = k // f max = k - k % f sum = (f + max) * (n // 2) if n % 2 is 1: sum += (f + max) // 2 return sum print(str(get_multiple_sum(3) + get_multiple_sum(5) - get_multiple_sum(15))) . 233168 .",
            "url": "https://ntcho.github.io/project_euler/solution/2021/06/10/p1.html",
            "relUrl": "/solution/2021/06/10/p1.html",
            "date": " • Jun 10, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://ntcho.github.io/project_euler/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://ntcho.github.io/project_euler/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://ntcho.github.io/project_euler/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ntcho.github.io/project_euler/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}