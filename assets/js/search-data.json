{
  
    
        "post0": {
            "title": "Problem 3 - Largest prime factor",
            "content": "Problem . The prime factors of 13195 are 5, 7, 13 and 29. . What is the largest prime factor of the number 600851475143 ? . Key Idea . prime factorization . Solution . Initial idea . O(n¬≤) complexity, brute force method. . Doesn&#39;t end under 1 minute. . n = 600851475143 def is_prime(n): for i in range(3, int(n ** 0.5) + 1, 2): if n % i is 0: return False return True max = 0 for i in range(3, n, 2): if i % 3 is 0 or i % 5 is 0 or i % 7 is 0: continue if n % i is 0: if is_prime(i): max = i print(max) . KeyboardInterrupt Traceback (most recent call last) &lt;ipython-input-14-3bf7fcdc1e29&gt; in &lt;module&gt; 13 continue 14 &gt; 15 if n % i is 0: 16 if is_prime(i): 17 max = i KeyboardInterrupt: . Why did I get it wrong? Forgot how to do prime factorization. üòì Prime factorization with division method . How to do prime factorization with division . Prime factors Remainder . 2 | 40 | . 2 | 20 | . 2 | 10 | . 5 | 5 | . | 1 | . Pseudocode . while n &gt; 1: find number i that makes n % i == 0: n = n / i restart i from 2 . n = 600851475143 max = 0 i = 2 while n &gt; 1: if n % i is 0: n = n // i if i &gt; max: max = i i = 2 continue i += 1 print(max) . 6857 . . Tip: In Python, 0 and 0.0 is different. Evaluating 0.0 is 0 will return False. .",
            "url": "https://ntcho.github.io/project_euler/solution/2021/06/14/p3.html",
            "relUrl": "/solution/2021/06/14/p3.html",
            "date": " ‚Ä¢ Jun 14, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Problem 27 - Quadratic primes",
            "content": "Problem . Considering quadratics of the form: . $n^2 + an + b$, where $ |a| &lt; 1000 $ and $|b| ‚â§ 1000$ where $|n|$ is the modulus/absolute value of $n$ . e.g. $|11| = 11$ and $|-4| = 4$ . Find the product of the coefficients, $a$ and $b$, for the quadratic expression that produces the maximum number of primes for consecutive values of $n$, starting with $n = 0$. . Key Idea . using the property of prime numbers to optimize loops . Solution . Initial idea . O(n¬≥) complexity. . Simplifying the formula $ n^2 + an + b $ into $ n (n + a) + b $, we can derive the following properties for the variables in the formula. . Since $ n^2 + an + b $ must be prime, both $ n $ and $ b $, $ n + a $ and $ b $ must be prime. | Since $ n^2 + an + b $ must be prime when $ n = 0 $, $ b $ must be prime. | Since $ n $ is consecutive from 0, pair $ (0, b) $, $ (a, b) $, $ (1, b) $, $ (a + 1, b) $, ... must be prime accordingly. | Since $ b $ must be prime and $ |b| ‚â§ 1000 $, possible values of $ b $ is prime numbers not exceeding 1000. | Properties applied in code . From property 1 and 3, the conditional statement if n % b is 0 or (n + a) % b is 0 was derived and added in order to optimize iteration. . From property 2, the iteration starts with n = 1 because b is always prime since it&#39;s from the precalculated list of primes. . From property 4, all primes not exceeding 1000 were calculated into b_list. Additionally, using for i in range(3, 1000 + 1, 2): ..., we excluded all even numbers from the iteration. . Pseudocode . calculate all possible values of b for all b: for n from 0: for a from -999 to 999: if n and n + a are prime to b: check whether n + 1 and n + 1 + a are prime, n + 2 and n + 2 + a are prime ... repeat until n + k or n + k + a are not prime . def is_prime(n): for f in range(2, int(n ** 0.5)): if n % f is 0: return False return True b_list = [2] for i in range(3, 1000 + 1, 2): if is_prime(i): b_list.append(i) max = 0 coef_a = 0 coef_b = 0 for b in b_list: for a in range(-999, 1000): count = 1 n = 1 while n * (n + a) + b &gt; 1: if n % b is 0 or (n + a) % b is 0: break # not prime with b if is_prime(n * (n + a) + b): count += 1 n += 1 else: break if count &gt; max: max = count coef_a = a coef_b = b print(coef_a * coef_b) . -59231 . NOTE: Add . if n &lt; 2: return False . in is_prime() function in order to make it complete. .",
            "url": "https://ntcho.github.io/project_euler/solution/2021/06/12/p27.html",
            "relUrl": "/solution/2021/06/12/p27.html",
            "date": " ‚Ä¢ Jun 12, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Problem 26 - Reciprocal cycles",
            "content": "Problem . Find the value of d &lt; 1000 for which 1/d contains the longest recurring cycle in its decimal fraction part. . Key Idea . using the special relation between fraction and remainders . avoiding brute forcing using mathematical properties . Solution . Initial idea . O(n¬≥) complexity. . Brute force through every possible patterns (repeating decimals) with string comparison and check whether the pattern is found multiple times in the decimals. . from decimal import Decimal as d, getcontext getcontext().prec = 5000 def get_pattern(s): l = len(s) for start_pos in range(l): for pattern_length in range(1, l // 2 + 1): # maximum pattern length is l // 2 because of the precision limitation # can&#39;t determine whether it is repeating or not if it&#39;s longer than l // 2 pattern = s[start_pos:start_pos + pattern_length] # print(f&#39; nstart_pos = {start_pos}, pattern = &#39;{pattern} &#39;&#39;) # compare the pattern to the rest of the string found = None for find_pos in range(start_pos + pattern_length, l, pattern_length): compare = s[find_pos:find_pos + pattern_length] # print(f&#39; comparing &#39;{pattern} &#39; and &#39;{compare} &#39;&#39;) if pattern != compare: if found is not None and len(pattern) &gt; len(compare): # pattern does match but goes over the precision limit found = pattern else: # pattern does not match found = None break else: found = pattern if found is not None: found = pattern return found # pattern match found # no pattern is found in the fraction return &#39;&#39; max = [(&#39;&#39;, 0)] # pattern, n (of 1/n) for i in range(1, 1000): # d(1) / d(6) = 0.1666666666666666666666666667 # ‚îî string stored in f ‚îò # f = &#39;166666666666666666666666666&#39; # trim first 2 characters and last 1 character if exists f = str(d(1) / d(i))[2:-1] if len(f) &lt; 20: continue # not reciprocal result = get_pattern(f) if len(result) &gt; len(max[0][0]): max = [(result, i, f)] elif len(result) == len(max[0][0]): max.append((result, i, f)) print(max[0][1]) . 983 . NOTE: Python&#39;s count() function could&#39;ve been used in this case. No need to write a custom string comparator. . Remainder method (from Mike Zubko in solution thread) . O(n¬≤) complexity. Key idea explained in Repeating decimal from Wikipedia. . It follows that any repeating decimal with period n, and k digits after the decimal point that do not belong to the repeating part, can be written as a (not necessarily reduced) fraction whose denominator is (10^n ‚àí 1)10^k. . Conversely the period of the repeating decimal of a fraction c/d will be (at most) the smallest number n such that 10‚Åø ‚àí 1 is divisible by d. . For example, the fraction 2/7 has d = 7, and the smallest k that makes 10^k ‚àí 1 divisible by 7 is k = 6, because 999999 = 7 √ó 142857. The period of the fraction 2/7 is therefore 6. . Using the fact the problem only requires the period of the repeating decimal (length of the pattern), we can derive the period without calculating the actual decimals. . NOTE:Look for shortcuts to the answer. By finding the smallest p for the given i with the following code, we can efficiently calculate the period of the repeating decimal. . while p &lt; i and (10 ** p) % i != 1: p += 1 . n = 0 # the n with the longest period max_period = 0 for i in range(1, 1000, 2): # step of 2 to skip every even number if i % 5 != 0: # skip every multiple of 5 p = 1 # period for current i while p &lt; i and (10 ** p) % i != 1: p += 1 if p &gt; max_period: max_period = p n = i print(ans) . 983 .",
            "url": "https://ntcho.github.io/project_euler/solution/2021/06/12/p26.html",
            "relUrl": "/solution/2021/06/12/p26.html",
            "date": " ‚Ä¢ Jun 12, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Problem 2 - Even Fibonacci numbers",
            "content": "Problem . Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: . 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... . By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms. . Key Idea . testing first few iterations for patterns (especially when thousands of iterations are estimated) . Solution . Initial idea . O(n) complexity, using recursion. . NOTE: Use loops over recursions for performance. . k = 4000000 sum = 0 def fibo(a, b): if a % 2 is 0: global sum # NOTE: Keyword `global` is required to change the global # variable in a function in Python. sum += a if b &lt; k: fibo(b, a + b) fibo(1, 2) print(str(sum)) . 4613732 . Loop method (from overview) . O(n) complexity. . a = 1 b = 2 sum = 0 while b &lt; k: if b % 2 is 0: sum += b c = a + b a = b b = c print(str(sum)) . 4613732 . Every third number method (from overview) . O(n) complexity, with 1/3 of the iteration compared to the loop method. . Key idea: testing first few iterations . fibonacci sequence = 1 1 2 3 5 8 13 21 34 55 89 144 ... . sum = 0 a = 1 b = 1 c = a + b while c &lt; k: sum += c # Third iteration is always even number a = b + c b = c + a c = a + b print(str(sum)) . 4613732 .",
            "url": "https://ntcho.github.io/project_euler/solution/2021/06/10/p2.html",
            "relUrl": "/solution/2021/06/10/p2.html",
            "date": " ‚Ä¢ Jun 10, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Problem 1 - Multiples of 3 and 5",
            "content": "Problem . If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. . Find the sum of all the multiples of 3 or 5 below 1000. . Key Idea . using mathematical concepts to reduce the iteration number . Solution . Initial idea . O(1) complexity. . Using the mathematical concept of sum of multiples exists as a pair in a range. . For example, for the sum of multiples of 2 not exceeding 8, there would be 5 pairs with equal sum: (2, 8), (4, 6). These pairs sum to 2 + 8, which is the minimum and the maximum multiple. Numbers with odd number of multiples, we can just add (min + max) // 2 to the sum. . k = 999 f = [3, 5, 15] # factors n = [k//3, k//5, k//15] # number of multiples max = [k - k%3, k - k%5, k - k%15] # biggest multiples for each factor sum = [] # sum of each factors for i in range(3): minmax = f[i] + max[i] s = (n[i] // 2) * minmax if n[i] % 2 is 1: s += minmax // 2 sum.append(s) print(str(sum[0] + sum[1] - sum[2])) . 233168 . WARNING: Since it&#39;s defined in the problem as &#39;below 1000&#39;, it shouldn&#39;t contain 1000. . TIP:Consider the range with operands such as &lt;, &gt;, etc. NOTE: Clarify the range of the problem before diving into it. . Bruteforce method . O(n) complexity. . s = 0 for i in range(1000): if i % 3 is 0 or i % 5 is 0: s += i print(s) . 233168 . Function method (from overview) . O(1) complexity. . TIP:Use functons or external blocks for complicated for loops or loops with small iteration count. . k = 999 def get_multiple_sum(f): n = k // f max = k - k % f sum = (f + max) * (n // 2) if n % 2 is 1: sum += (f + max) // 2 return sum print(str(get_multiple_sum(3) + get_multiple_sum(5) - get_multiple_sum(15))) . 233168 .",
            "url": "https://ntcho.github.io/project_euler/solution/2021/06/10/p1.html",
            "relUrl": "/solution/2021/06/10/p1.html",
            "date": " ‚Ä¢ Jun 10, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a ‚Äúlevel 1 heading‚Äù in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here‚Äôs a footnote 1. Here‚Äôs a horizontal rule: . . Lists . Here‚Äôs a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes ‚Ä¶and‚Ä¶ . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote.¬†&#8617; . |",
            "url": "https://ntcho.github.io/project_euler/2020/01/14/test-markdown-post.html",
            "relUrl": "/2020/01/14/test-markdown-post.html",
            "date": " ‚Ä¢ Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "This website is my archive of solutions for Project Euler. . You can find me on Project Euler by the username ntcho. Add me with the friend key 1828846_mDXX1JoQ1hEkfcH39KbcQhDPZCEUn52X! . Please feel free to leave comments on my solutions for better approach, or any questions. . Behind the scenes . This website is powered by fastpages. You can check out the codes and the source repository here. .",
          "url": "https://ntcho.github.io/project_euler/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ ‚Äúsitemap.xml‚Äù | absolute_url }} | .",
          "url": "https://ntcho.github.io/project_euler/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}